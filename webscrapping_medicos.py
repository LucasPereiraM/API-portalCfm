# -*- coding: utf-8 -*-
"""webscrapping medicos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mLc4YVUFUDlIOMhzBkO5rLtKv-qoph35
"""

import requests
import json
import pandas as pd
from google.colab import files

# Dicionário de mapeamento de especialidades para seus respectivos códigos
especialidades = {
    "Pediatria": "58",
    "Cardiologia": "17",
    "Psiquiatria": "39",
    "Dermatologia": "18",
    "Ortopedia": "46",
    "Ginecologia": "25",
    "Oftalmologia": "31",
    "Neurologia": "35",
    "Endocrinologia": "22",
    "Gastroenterologia": "23"
    # Adicione mais especialidades conforme necessário
}

# Função para buscar o código de uma especialidade por nome
def get_especialidade_code(nome_especialidade):
    return especialidades.get(nome_especialidade.capitalize(), None)

# Função para salvar os dados encontrados em um arquivo Excel
def salvar_para_excel(dados, estado, especialidade):
    # Cria um DataFrame a partir dos dados encontrados
    df = pd.DataFrame(dados)

    # Nome do arquivo Excel com base no estado e especialidade
    nome_arquivo = f'{estado}_{especialidade}.xlsx'

    # Salvando o DataFrame no arquivo Excel
    df.to_excel(nome_arquivo, index=False)
    print(f"Arquivo '{nome_arquivo}' salvo com sucesso!")

    files.download(nome_arquivo)

# Exemplo de busca por especialidade por nome
nome_especialidade = "Psiquiatria"
codigo_especialidade = get_especialidade_code(nome_especialidade)
estado = "MG"

if codigo_especialidade:
    # URL da API ou endpoint de busca de médicos
    url = 'https://portal.cfm.org.br/api_rest_php/api/v1/medicos/buscar_medicos'

    # Payload com os dados da requisição (estado, especialidade, município, etc.)
    payload = [
        {
            "useCaptchav2": False,  # Aqui está desativado o uso de CAPTCHA
            "captcha": "",  # Deixe em branco por enquanto
            "medico": {
                "nome": "",  # Deixe vazio se quiser buscar todos
                "ufMedico": estado,  # Estado da busca
                "crmMedico": "",  # Pode deixar vazio para busca geral
                "municipioMedico": "",  # Código do município, substitua conforme necessário
                "tipoInscricaoMedico": "",  # Tipo de inscrição, pode deixar vazio
                "situacaoMedico": "",  # Situação do médico, pode deixar vazio
                "detalheSituacaoMedico": "",  # Detalhe da situação, pode deixar vazio
                "especialidadeMedico": codigo_especialidade,  # Código da especialidade obtido
                "areaAtuacaoMedico": ""  # Pode deixar vazio ou preencher conforme o necessário
            },
            "page": 1,  # Página inicial
            "pageNumber": 1,  # Número da página
            "pageSize": 100  # Número de resultados por página
        }
    ]

    # Cabeçalhos HTTP para simular um navegador
    headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    # Fazendo a requisição POST para enviar os dados do formulário
    response = requests.post(url, data=json.dumps(payload), headers=headers)

    if response.status_code == 200:
        # Imprime a resposta JSON para depuração
        data = response.json()
        print("Resposta JSON da API:", json.dumps(data, indent=2))  # Imprime o JSON formatado

        # Parseando o JSON retornado
        if "dados" in data and isinstance(data["dados"], list):
            lista_medicos = []
            for medico in data["dados"]:
                nome = medico.get("NM_MEDICO", "Não disponível")
                crm = medico.get("NU_CRM", "Não disponível")
                uf = medico.get("SG_UF", "Não disponível")
                especialidade = medico.get("ESPECIALIDADE", "Não disponível")

                # Adicionando os dados a uma lista de dicionários
                lista_medicos.append({
                    "Nome": nome,
                    "CRM": crm,
                    "Estado": uf,
                    "Especialidade": especialidade
                })

            # Salvando os dados no arquivo Excel
            salvar_para_excel(lista_medicos, estado, nome_especialidade)
        else:
            print("Nenhum médico encontrado com os parâmetros fornecidos.")
    else:
        print(f"Erro ao acessar a API: {response.status_code}")
else:
  print(f"Especialidade '{nome_especialidade}' não encontrada.")